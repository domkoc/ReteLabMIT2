package hu.bme.mit.yakindu.analysis.workhere;

import org.eclipse.emf.common.util.TreeIterator;
import org.eclipse.emf.ecore.EObject;
import org.junit.Test;
import org.yakindu.sct.model.sgraph.State;
import org.yakindu.sct.model.sgraph.Statechart;
import org.yakindu.sct.model.sgraph.Transition;
import org.yakindu.sct.model.sgraph.Trigger;
import org.yakindu.sct.model.stext.stext.EventDefinition;
import org.yakindu.sct.model.stext.stext.VariableDefinition;

import hu.bme.mit.model2gml.Model2GML;
import hu.bme.mit.yakindu.analysis.modelmanager.ModelManager;

public class Main {
	@Test
	public void test() {
		main(new String[0]);
	}
	
	public static void main(String[] args) {
		ModelManager manager = new ModelManager();
		Model2GML model2gml = new Model2GML();
		
		// Loading model
		EObject root = manager.loadModel("model_input/example.sct");
		
		// Reading model
		//secondPart(root);
		fourthPart(root);
		
		// Transforming the model into a graph representation
		String content = model2gml.transform(root);
		// and saving it
		manager.saveFile("model_output/graph.gml", content);
	}
	
	private static void fourthPart(EObject root) {
		Statechart s = (Statechart) root;
		TreeIterator<EObject> iterator = s.eAllContents();
		System.out.println("import java.io.IOException;\n" + 
				"\n" + 
				"import hu.bme.mit.yakindu.analysis.RuntimeService;\n" + 
				"import hu.bme.mit.yakindu.analysis.TimerService;\n" + 
				"import hu.bme.mit.yakindu.analysis.example.ExampleStatemachine;\n" + 
				"import hu.bme.mit.yakindu.analysis.example.IExampleStatemachine;");
		
		
		
		
		
		System.out.println("public static void print(IExampleStatemachine s) {");
		while (iterator.hasNext()) {
			EObject content = iterator.next();
			if(content instanceof VariableDefinition) {
				VariableDefinition variableDefinition = (VariableDefinition) content;
				System.out.println("System.out.println(\"" + variableDefinition.getName().charAt(0) + " = \" + s.getSCInterface().get" + variableDefinition.getName() + "());");
			}
			if (content instanceof EventDefinition) {
				EventDefinition eventDefinition = (EventDefinition) content;
				System.out.println("System.out.println(\"" + eventDefinition.getName().charAt(0) + " = \" + s.getSCInterface().get" + eventDefinition.getName() + "());");

			}
			
		}
		System.out.println("}");
		System.out.println("}");
	}

	private static void secondPart(EObject root) {
		Statechart s = (Statechart) root;
		TreeIterator<EObject> iterator = s.eAllContents();
		int suffix = 0;
		while (iterator.hasNext()) {
			EObject content = iterator.next();
			if(content instanceof State) {
				State state = (State) content;
				if (state.getName() == "") {
					TreeIterator<EObject> insideIterator = s.eAllContents();
					while (insideIterator.hasNext()) {
						EObject insideContent = insideIterator.next();
						if(insideContent instanceof State) {
							State insideState = (State) insideContent;
							if (insideState.getName() == "State"+suffix) {
								suffix++;
								insideIterator = s.eAllContents();
							}
						}
					}
					System.out.println("Névtelen állapot! Javasolt név: " + "State" + suffix);
					suffix++;
				}
				if (state.getOutgoingTransitions().isEmpty()) {
					System.out.println("Csapda: " + state.getName());
				} else {
					System.out.println(state.getName());
				}
			}
			if (content instanceof Transition) {
				Transition transition = (Transition) content;
				System.out.println(transition.getSource().getName() + " -> " + transition.getTarget().getName());
			}
			
		}
	}
}
